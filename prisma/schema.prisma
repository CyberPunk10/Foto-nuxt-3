// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  name         String?
  username     String  @unique
  password     String
  profileImage String?
  // posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RefreshToken
  refreshToken RefreshToken[]

  // Tweet
  tweet Tweet[]

  // MediaFile
  mediaFiles MediaFile[]
}

model RefreshToken {
  id    Int    @id @default(autoincrement())
  token String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int // тип в базе не задан, но в примере было для MongoDB, а у нас Postgresql
  user   User? @relation(fields: [userId], references: [id])
}

model Tweet {
  id   Int    @id @default(autoincrement())
  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Author
  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  replayToId Int?
  replayTo   Tweet?  @relation("replies", fields: [replayToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    Tweet[] @relation("replies")

  // MediaFile
  mediaFiles MediaFile[]
}

model MediaFile {
  id               Int    @id @default(autoincrement())
  url              String
  providerPublicId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User
  user   User @relation(fields: [userId], references: [id])
  userId Int

  // Tweets
  tweet   Tweet? @relation(fields: [tweetId], references: [id])
  tweetId Int?
}
